unit ClienteController;

interface

uses
  ClienteModel, System.Generics.Collections, System.SysUtils, Winapi.Messages,
  Winapi.Windows, ClienteDAO;

type
  TClienteControl = class
  private

    FCliente: TCliente;
    FClienteDAO: TClienteDAO;
  public
    property ClienteDAO: TClienteDAO read FClienteDAO write FClienteDAO;
    function ValidarCPF(ACPF: String): Boolean;
    constructor Create;
    destructor Destroy; override;
  end;

implementation

{ TClienteControl }

constructor TClienteControl.Create;
begin
  FClienteDAO := TClienteDAO.Create;
end;

destructor TClienteControl.Destroy;
begin
  FClienteDAO.Free;
  inherited;
end;

// Função que validará o CPF
function TClienteControl.ValidarCPF(ACPF: String): Boolean;
var
  dig10, dig11: string;
  s, I, r, peso: integer;
begin
  // length - retorna o tamanho da string (ACPF é um número formado por 11 dígitos)
  if ((ACPF = '00000000000') or (ACPF = '11111111111') or (ACPF = '22222222222')
    or (ACPF = '33333333333') or (ACPF = '44444444444') or
    (ACPF = '55555555555') or (ACPF = '66666666666') or (ACPF = '77777777777')
    or (ACPF = '88888888888') or (ACPF = '99999999999') or (length(ACPF) <> 11))
  then
  begin
    Result := false;
    raise Exception.Create('CPF inválido');
    exit;
  end;

  // try - protege o código para eventuais erros de conversão de tipo na função StrToInt
  try
    { *-- Cálculo do 1o. Digito Verificador --* }
    s := 0;
    peso := 10;
    for I := 1 to 9 do
    begin
      // StrToInt converte o i-ésimo caractere do ACPF em um número
      s := s + (StrToInt(ACPF[I]) * peso);
      peso := peso - 1;
    end;
    r := 11 - (s mod 11);
    if ((r = 10) or (r = 11)) then
      dig10 := '0'
    else
      str(r: 1, dig10); // converte um número no respectivo caractere numérico

    { *-- Cálculo do 2o. Digito Verificador --* }
    s := 0;
    peso := 11;
    for I := 1 to 10 do
    begin
      s := s + (StrToInt(ACPF[I]) * peso);
      peso := peso - 1;
    end;
    r := 11 - (s mod 11);
    if ((r = 10) or (r = 11)) then
      dig11 := '0'
    else
      str(r: 1, dig11);

    { Verifica se os digitos calculados conferem com os digitos informados. }
    if ((dig10 = ACPF[10]) and (dig11 = ACPF[11])) then
      Result := true
    else
    begin
      Result := false;
      raise Exception.Create('CPF inválido');
    end;
  except
    Result := false;
    raise Exception.Create('CPF inválido');
  end;
end;

end.
