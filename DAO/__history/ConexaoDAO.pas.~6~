unit ConexaoDAO;

interface

uses
  System.SysUtils, FireDAC.Comp.Client, FireDAC.Stan.Def, FireDAC.Phys.FB,
  FireDAC.Dapt,
  FireDAC.UI.Intf, FireDAC.VCLUI.Wait, FireDAC.Stan.Intf, FireDAC.Comp.UI,
  FireDAC.Stan.Pool, FireDAC.Stan.Async;

type
  TConectDAO = class
  private
    FDQuery: TFDQuery;
    FDConexao: TFDConnection;
    procedure ConectarBanco;
    procedure InicializarQuery;
  protected
    function ExecutarComando(const ASQL: string): integer;
    function ExibirDataSet(const ASQL : string):integer;
  public
    constructor Create;
    destructor Destroy;
    property Conexao: TFDConnection read FDConexao;
    property Query: TFDQuery read FDQuery;
  end;

implementation

{ TConectDAO }

// Procedimento de conectar ao banco de dados
procedure TConectDAO.ConectarBanco;
var
  Banco: string;
begin
  FDConexao := TFDConnection.Create(nil);
  Banco := GetCurrentDir + '\BANCO.FDB';
  with FDConexao.Params do
  begin
    DriverID := 'FB';
    Database := Banco;
    UserName := 'SYSDBA';
    Password := 'masterkey';
  end;
  FDConexao.Connected := True;
end;

constructor TConectDAO.Create;
begin
   ConectarBanco;
   InicializarQuery;
end;

destructor TConectDAO.Destroy;
begin
  FDConexao.Free;
  FDQuery.Free;
  inherited;
end;

function TConectDAO.ExecutarComando(const ASQL: string): integer;
begin
  try
    FDConexao.StartTransaction;
    FDQuery.SQL.Clear;
    FDQuery.SQL.Text := ASQL;
    FDQuery.ExecSQL;
    FDConexao.Commit;
  except
    FDConexao.Rollback;
  end;
  Result := FDQuery.RowsAffected;
end;


function TConectDAO.ExibirDataSet(const ASQL: string): TFDQuery;
begin
  FDQuery.SQL.Clear;
  FDQuery.SQL.Text := ASQL;
  FDQuery.Active := True;
  FDQuery.ExecSQL;

  Result := FDQuery;
end;

procedure TConectDAO.InicializarQuery;
begin
  FDQuery := TFDQuery.Create(nil);
  FDQuery.Connection := FDConexao;
end;

end.
